-Description

This client is a reference implementation to use Tractis Long Term Archive service. 
It's built over codehaus xfire webservices client. 

Currently it implements content store and recover by id or properties. 

You can create your own using the service description file available at https://api.tractis.com/lta/content_storage.wsdl .

-Credentials settings

You first need to create an API Key at https://www.tractis.com/webservices/lta. The using the key/secret values you must fill the values at the file soap/property for USERNAME and PASS but leaving untouched url.

-Building the client

+ Fast way :

You need to have maven installed, then simply use 

	mvn package -Dmaven.test.skip=true

+ Best way
	
This builds skipping test cases. To launch test cases you need to create a Tractis account and to generate a LTA API Key at https://www.tractis.com/webservices/lta .
Then go to LTATestCase and change user and pass attributes with the values of your API Key Identifier/Secret .

	mvn package
	
Both processes would create a jar file  storage-client-1.0.jar under target dir containing all classes needed to invoke LTA service.

-Client Usage

Here we include an example code using most of provided features for dealing with content lifecycle (extracted from TestCases).

		//Content Store
		Map<String,String> meta = new HashMap<String, String>();
		meta.put("Tag", "My content");
		meta.put("Time", new Date().toGMTString()); //Used to given an unique timestamp property
		
		ContentStoreResponse storedContent = this.stub.storeContent("Content".getBytes(), meta);
		
		//Ensure item can be recovered
		String contentIdentifier = storedContent.contentIdentifier;
		System.out.println("Storing content, id is " + contentIdentifier);
		
		...
		
		//Content Recover by Id
		ProtectedContent recoverContent = this.stub.recoverContent(contentIdentifier);
		byte[] c = recoverContent.getContent();
		
		...
		
		//Recover by properties
		Collection recoverContentCollection = this.stub.recoverContent(meta);
		ProtectedContent recoveredResponseByProperties = (ProtectedContent) recoverContentCollection.iterator().next();
		String recoveredResponseByPropertiesIdentifier = recoveredResponseByProperties.contentIdentifier;
		
		...
		
		//Remove element
		ProtectedContent removeElement = this.stub.removeElement(contentIdentifier);		
